buildscript {
    ext.kotlin_version = '1.4.21'
}

plugins {
    id "org.jetbrains.dokka" version "1.4.10.2"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
}

apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = sourceCompatibility
compileKotlin { kotlinOptions.jvmTarget = sourceCompatibility }
compileTestKotlin { kotlinOptions.jvmTarget = sourceCompatibility }

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Logging dependencies
    compile("ch.qos.logback:logback-classic:1.2.3")
    compile("ch.qos.logback:logback-core:1.2.3")
    compile "org.slf4j:slf4j-api:1.7.25"

    compile 'com.google.guava:guava:29.0-jre'
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'org.apache.commons:commons-math3:3.6'
    compile 'org.iq80.snappy:snappy:0.4'
    compile 'com.indeed:util-mmap:1.0.35'
    compile 'com.github.samtools:htsjdk:2.10.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testCompile 'junit:junit:4.13.2'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.apache.commons:commons-lang3:3.11"
}

dokkaJavadoc {
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

test {
    // Seems on Windows default heap size is about 256m
    // and that is why tests fails with java heap size OOM
    maxHeapSize = "1024m"
}

jar {
    archivesBaseName = 'big'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

signing {
    // multiline environment variables are not fun.
    def signingKey = findProperty("signingKey")?.replace("\\n", "\n")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            def ossrhUsername = findProperty("ossrhUsername")
            def ossrhPassword = findProperty("ossrhPassword")

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.groupId = 'org.jetbrains.bio'

            pom.project {
                name 'big'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'BigWIG, BigBED and TDF for the JVM'
                url 'https://github.com/JetBrains-Research/big'

                scm {
                    connection 'scm:git:git@github.com:JetBrains-Research/big.git'
                    developerConnection 'scm:git:git@github.com:JetBrains-Research/big.git'
                    url 'https://github.com/JetBrains-Research/big'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/JetBrains-Research/big/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'dievsky'
                        name 'Aleksei Dievskii'
                        email 'alexey.dievsky@jetbrains.com'
                    }
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '6.5'
}
